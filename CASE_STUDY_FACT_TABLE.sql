Create database Case_Study
use Case_Study



--Dataset:
--The 3 key datasets for this case study:

--A. FactTable: The Fact Table has 14 columns mentioned below and 4200 rows.
--Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses, Marketing, 
--Inventory, Budget Profit, Budget COGS, Budget Margin, Budget
--Sales, and Area Code

--Note: COGS stands for Cost of Goods Sold
--B. ProductTable: The ProductTable has four columns named Product Type, Product, ProductID, and Type.
--It has 13 rows which can be brokend own into further details to retrieve the information mentioned in the Fact Table.

--C. Location Table: Location Table has 156 rows and follows a similar approach to ProductTable.
 
--It has four columns named Area Code, State, Market, and Market


select * from fact
select * from Product
select * from Location



--1) How many states are there where products have been sold ?
select * from Location
select * from Product
select * from fact

select COUNT(state) AS No_of_States, Product from Product as P
Inner join fact as F
ON P.productid=F.productid
Inner Join Location as L
ON F.Area_Code=L.Area_Code
Group by (Budget_Sales-Sales), Product
Having (Budget_Sales-Sales)=0

--2) How many products are of regular type ?
select * from Product

select count(Product) as No_of_Products, type from Product
where type like 'Regular'
group by type


--3) How much spending has been done on marketing of product id 1
select * from fact
select * from Product

select Sum(Marketing) AS Spending_on_Market, F.productid from fact as F
Inner Join Product AS P
 ON P.productid =F.productid
 WHERE F.productid like '1'
 Group by F.productid

--4) What is the minimum sales of a product ?
select * from fact
select * from Product

select MIN(Sales) as Min_Sales from Product AS P
Inner join fact AS F
ON P.productid =F.productid

--5) Display max Cost of Good Sold(COGS).
select * from fact

select MAX(COGS) as Max_Cost from fact

--6) Display the Details of the productid where product type is coffee
select * from Product

select Product_Type, Productid from Product
where Product_Type like 'Coffee'

--7) Display the details where total_expenses is greater than 40.
Select * from fact

select * from fact
where Total_Expenses >40

--8) What is the average sales in Area_Code 719 ?
SELECT * FROM fact

select AVG(Sales) as Average_sales, [Area_Code] from fact
Where [Area_Code] like '719'
Group by [Area_Code]

--9) Find out the total profit generated by Colorado state.
select * from fact
select * from Location

select SUM(F.Profit) AS Total_profit ,L.State from fact as F
Inner Join Location AS L
ON F.[Area_Code] =L.[Area_Code]
Where State like 'Colorado'
Group by L.State

--10) Display the average inventory for each product id.
SELECT * FROM fact

select AVG(Inventory)as Average_inventory, ProductId  from fact
Group by ProductId
Order By ProductId asc


--11) Display state in a sequential order in a location table.
Select * from Location

select State from Location
Order By State ASC 

--12) Display the average budget margin of the store where average budget margin should be greater than 100.
select * from fact

select AVG([Budget_Margin]) as Avg_Budget_Margin   from fact
where [Budget_Margin] >100

--13) What is the total sales done on date 2010-01-01
Select * from fact

Select SUM(Sales) as Total_Sales from fact
Group by Date
having Date = '2010-01-01'


--14) Display the average total expense of each product id on individual date
select * from fact

select Avg([Total_Expenses]) as Avg_Total_Expenses, Productid, Date from fact
Group by Productid, Date


--15) Display the table with the following attributes such as Date, productid, product_type, product, Sales, profit, state, area_code
select * from fact
select * from Product
select * from Location
_
select F.ProductId , P.[Product_Type], P.product, F.Sales, F.profit, L.state, F.[Area_Code],F.Date from fact as F
Inner Join Product AS P
ON F.ProductId=P.ProductId
Inner Join Location AS L
ON F.[Area_Code]=L.[Area_Code]

--16) Display the rank without any gap to show the Sales wise rank.
select * from fact

select *,dense_rank() over(order by sales) as Rnk
from fact

--17) Find the State wise Profit and Sales.
 Select * from fact
 select * from Location

 Select State, sum(Profit)as State_wise_Sum_of_Profits,sum(Sales) as State_wise_Sum_of_Sales from fact as F
 Inner Join Location as L
 ON F.[Area_Code] =L.[Area_Code]
 group by state
 
 --18) Find the State wise Profit and Sales along with the Product Name.
 Select * from fact
 select * from Location
 select * from Product

 Select L.State, P.Product, sum(Profit)as State_wise_Sum_of_Profits,sum(Sales)as State_wise_Sum_of_Sales from fact as F
 Inner Join Location as L
 ON F.[Area_Code] =L.[Area_Code]
 Inner Join Product AS P
 On F.ProductId=P.ProductId
 group by L.state, P.Product

--19) If there is an increase in sales of 5%. Calculate the increased sales.
select * from fact

SELECT Sales,(Sales * 1.05) AS FivePercent_increased_sales FROM fact;

--20) Find the maximum profit along with the Product id and Product Type.
select * from fact

select MAX(F.Profit)as Max_Profits, F.ProductId, P.[Product_Type]  from fact AS F
Inner Join Product AS P
ON F.ProductId=P.ProductId
Group by F.ProductId, P.[Product_Type]

--21) Create a Stored Procedure to fetch the result according to the product type from Product.

SELECT * FROM Product

CREATE PROCEDURE GetProductsByType2 
    @ProductType nvarchar(50)
AS 
BEGIN
    SELECT *
    FROM Product 
    WHERE type = @ProductType
END

EXEC GetProductsByType2 @ProductType ='Decaf'

--22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select * from fact

select *, IIF([Total_Expenses]<60, 'Profit', 'Loss') as Profit_Loss  from fact

--23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull the data in hierarchical order.
select * from fact

SELECT Date, ProductID, SUM(Sales) as Sum_Sales
FROM fact
GROUP BY ROLLUP (Date, ProductID)

--24) Apply union and intersection operator on the tables which consist of attribute area code
select * from fact
select * from Product

--Union--
select [Area_Code] from fact 
union
select [Area_Code] from Location

--Intersect ---
select [Area_Code] from fact 
Intersect
select [Area_Code] from Location



--26) Change the product type from coffee to tea where product id is 1 and undo it.
Select * from Product

Begin Transaction
UPDATE Product
SET Product_Type ='Tea' where Product_Type ='Coffee' and ProductId like '1'
Rollback Transaction


--27) Display the Date, productid and sales where total expenses are between 100 to 200.
select * from fact

Select Sales, ProductId, [Total_Expenses], Date from fact
where [Total_Expenses]  Between  100 and  200
--(or)
Select Sales, ProductId, [Total_Expenses], Date from fact
where [Total_Expenses]  >=100 and [Total_Expenses] <=200


--28) Delete the records in the product table for regular type.
Select * from Product

Delete from Product
where type like 'Regular'

--29) Display the ASCII value of the fifth character from the column product.

select * from Product

Select ASCII(SUBSTRING(Product, 5,1)) AS ASCII FROM Product